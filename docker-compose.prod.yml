services:
  # PostgreSQL Veritabanı
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: libproxy
      POSTGRES_USER: libproxy_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-libproxy_prod_pass_2024}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - libproxy_network
    restart: unless-stopped

  # Redis (Session ve Cache için)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - libproxy_network
    restart: unless-stopped

  # Flask Backend API
  backend:
    build: ./backend
    ports:
      - "5001:5000"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://libproxy_user:${POSTGRES_PASSWORD:-libproxy_prod_pass_2024}@db:5432/libproxy
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-change-this-in-production-2024}
      - HAPROXY_SOCKET=/run/haproxy/admin.sock
      - PROXY_CONFIG_DIR=/app/proxy_configs
      - CORS_ORIGINS=http://80.251.40.216:3000,http://80.251.40.216,https://80.251.40.216:3000,https://80.251.40.216
    volumes:
      - ./backend:/app
      - ./scripts:/app/scripts
      - ./proxy/configs:/app/proxy_configs
      - ./proxy:/app/haproxy_config
      - haproxy_socket:/run/haproxy
    depends_on:
      - db
      - redis
    networks:
      - libproxy_network
    restart: unless-stopped

  # HAProxy (Dinamik Proxy)
  haproxy:
    image: haproxy:2.8
    ports:
      - "80:80"
      - "8404:8404"  # HAProxy Stats
    volumes:
      - ./proxy/haproxy-simple.cfg:/usr/local/etc/haproxy/haproxy.cfg
      - ./backend/proxy_configs:/usr/local/etc/haproxy/configs
      - haproxy_socket:/run/haproxy
    depends_on:
      - backend
    networks:
      - libproxy_network
    restart: unless-stopped

  # React Frontend (Production)
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - REACT_APP_API_URL=http://80.251.40.216:5001/api
    ports:
      - "3000:80"
    volumes:
      - ./frontend/public/config.js:/usr/share/nginx/html/config.js
    depends_on:
      - backend
    networks:
      - libproxy_network
    restart: unless-stopped

volumes:
  postgres_data:
  haproxy_socket:

networks:
  libproxy_network:
    driver: bridge
